Sol 14
Algorithm:
  1.Let nums1 be the smaller array.
  2.Perform binary search on nums1:
    Choose a partition i in nums1, and compute j = (m + n + 1)/2 - i for nums2.
    Partition both arrays so that:
      left side has i elements from nums1 and j from nums2
      right side has the rest
  3.Check if:
    maxLeft1 <= minRight2 and maxLeft2 <= minRight1
  4.If yes:
    If total length is even: median = (max(maxLeft1, maxLeft2) + min(minRight1, minRight2)) / 2
    If odd: median = max(maxLeft1, maxLeft2)
  5.If maxLeft1 > minRight2, move search left. Else, move right.

Code:
class Solution {
    public double findMedianSortedArrays(int[] nums1, int[] nums2) {
        int n1 = nums1.length;
        int n2 = nums2.length;
        int[] nums3 = new int[n1+n2];
        int n = nums3.length;
        int i = 0;
        int j = 0;
        int k = 0;

        while(i < n1 && j < n2){
            if(nums1[i] <= nums2[j]){
                nums3[k++] = nums1[i++];
            }
            else{
                nums3[k++] = nums2[j++];
            }
        }
        while(i < n1){
            nums3[k++] = nums1[i++];
        }
        while(j < n2){
            nums3[k++] = nums2[j++];
        }
        if(n%2 == 1){
            return nums3[n/2];
        }
        return ((double) nums3[n / 2] + (double) nums3[n / 2 - 1]) / 2.0;
    }
}

Time Complexity: O(log(min(m, n)))
Space Complexity: O(1)

