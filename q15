Sol 15
Algorithm:
  1.Let low = matrix[0][0] and high = matrix[n-1][n-1].
  2.While low < high:
    Let mid = (low + high) / 2
    Count how many elements in the matrix are <= mid.
    If the count is less than k, search in the right half (low = mid + 1)
    Else, search in the left half (high = mid)
  3.Return low.
Code:
public class KthSmallestInSortedMatrix {
    
    public int kthSmallest(int[][] matrix, int k) {
        int n = matrix.length;
        int low = matrix[0][0];
        int high = matrix[n - 1][n - 1];

        while (low < high) {
            int mid = low + (high - low) / 2;
            int count = countLessEqual(matrix, mid);
            if (count < k) {
                low = mid + 1;
            } else {
                high = mid;
            }
        }
        return low;
    }
    private int countLessEqual(int[][] matrix, int val) {
        int count = 0;
        int n = matrix.length;
        int row = n - 1;
        int col = 0;

        while (row >= 0 && col < n) {
            if (matrix[row][col] <= val) {
                count += row + 1;
                col++;
            } else {
                row--;
            }
        }
        return count;
    }
Time Complexity: O(n * log(max - min))
Space Complexity: O(1)
