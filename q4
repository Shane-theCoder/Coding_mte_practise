Algorithm:
  1.Calculate the total sum of the array.
  2.Initialize leftSum = 0.
  3.Traverse the array:
      a.Add the current element to leftSum.
      b.Subtract it from totalSum (now becomes right sum).
      c.If at any point leftSum == totalSum, return true.
  4.If no such point is found, return false.

Code:-

public class SplitArrayEqualSum {

    public static boolean canSplit(int[] arr) {
        int totalSum = 0;
        for (int num : arr) {
            totalSum += num;
        }

        int leftSum = 0;
        for (int i = 0; i < arr.length - 1; i++) {
            leftSum += arr[i];
            totalSum -= arr[i];  
            if (leftSum == totalSum) {
                return true;
            }
        }

        return false;
    }

Time Complexity: O(n)
    One pass to compute total sum.
    One pass to find the split point.

Space Complexity: O(1)
    Only a few variables used, no extra data structures.



  
